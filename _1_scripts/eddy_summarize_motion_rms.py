#!/usr/bin/env python
""" 
Summarize DTI intervolume head movement from output file generated by FSL's eddy tool.

Usage: eddy_summarize_motion_rms.py  </path/to/eddy/eddy_unwarped_images.eddy_restricted_movement_rms>

Example: eddy_summarize_motion_rms.py /shared/uher/FORBOW/analysis/001_A/Diffusion/eddy/eddy_unwarped_images.eddy_restricted_movement_rms

"""

import os,sys


MIN_NUM_DWI_DIRECTIONS=33
VALUES_PER_ROW=2
SKIP_FIRST_ROW=True
DEBUG_MODE=False


class CustomError(Exception):
	def __init__(self, value):
		self.parameter = value
	def __str__(self):
		return repr(self.parameter)

def usage():
    """ print the docstring and exit"""
    sys.stdout.write(__doc__)
    sys.exit(2)


def mean(data):
	"""Return the sample arithmetic mean of data."""
	n = len(data)
	if n < 1:
		raise ValueError('mean requires at least one data point')
	return sum(data)/n # in Python 2 use sum(data)/float(n)

def _ss(data):
	"""Return sum of square deviations of sequence data."""
	c = mean(data)
	ss = sum((x-c)**2 for x in data)
	return ss

def stdev(data, ddof=0):
	"""Calculates the population standard deviation
	by default; specify ddof=1 to compute the sample
	standard deviation."""
	n = len(data)
	if n < 2:
		raise ValueError('variance requires at least two data points')
	ss = _ss(data)
	pvar = ss/(n-ddof)
	return pvar**0.5
        
def summarize(rmsfile):
	if DEBUG_MODE:
		print ' -- processing rmsfile: %s' % (rmsfile)
	result='.,.'
	try:
		data=[]
		with open(rmsfile,'rU') as fp:
			data = [line.rstrip('\n') for line in fp]
		if DEBUG_MODE:		
			print ' -- found %d lines in file:' % (len(data))
			for i in range(len(data)):
				print 'row[%d]:'%i,data[i]
		if len(data) < MIN_NUM_DWI_DIRECTIONS:
			raise CustomError('only found %d rows in file, expected at least %d...'%(len(data),MIN_NUM_DWI_DIRECTIONS))
		A,R = [],[]
		for row in data:
			toks=row.split()
			if len(toks)!=VALUES_PER_ROW:
				raise CustomError('found %d tokens on one line, expected %d...'%(len(toks),VALUES_PER_ROW))
			A.append(float(toks[0]))
			R.append(float(toks[1]))
		A=A[1:33]
		R=R[1:33]
		if DEBUG_MODE:
			print '\n - A,len=%d:' % len(A), A
			print '\n - R:, len=%d' % len(R), R
			print 'count(A),mean(A),stdev(A),count(R),mean(R),stdev(R)'
			print '%d,%.6f,%.6f,%d,%.6f,%.6f\n' % (len(A),mean(A),stdev(A), len(R),mean(R),stdev(R))
		result='%.6f,%.6f' %(mean(A),mean(R))
	except CustomError, (err):
		if DEBUG_MODE:
			print '* ERROR: Caught CustomError(%s)' %(err.parameter)
		print result
		sys.exit(1)
	except OSError as err: 
		print '* Caught OSError(%s)'%(err)
		print result
		sys.exit(1)
	except ValueError as err: 
		print '* Caught ValueError(%s)'%(err)
		print result
		sys.exit(1)
	except:
		if DEBUG_MODE:
			print '* Caught Unexpected Exception(%s)'%(sys.exc_info()[0])
		print result
		sys.exit(1)
	print result
	return
		

def forbow_test():
	pass
	#for S in `/bin/ls -d [0,1]??_[A,B,C]*`; do 
	#  r="`pwd`/$S/Diffusion/eddy/eddy_unwarped_images.eddy_restricted_movement_rms"; 
	#  if [ -r "$r" ]; then /bin/ls -l $r; 
	#  else echo "-- $S no eddy_unwarped_images.eddy_movement_rms"; fi;  
	#done


if __name__=='__main__':
	if len(sys.argv)!=2:
		usage()
		#infile='eddy_unwarped_images.eddy_restricted_movement_rms'
	summarize( os.path.abspath(sys.argv[1]) )
	sys.exit(0)
